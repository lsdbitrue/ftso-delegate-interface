/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SongbirdHelperInterface extends ethers.utils.Interface {
  functions: {
    "FtsoManager()": FunctionFragment;
    "FtsoRewardManager()": FunctionFragment;
    "Version()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "delegateInfo(address)": FunctionFragment;
    "votePowers(address[])": FunctionFragment;
    "wSGB()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FtsoManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FtsoRewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowers",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "wSGB", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "FtsoManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FtsoRewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votePowers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wSGB", data: BytesLike): Result;

  events: {};
}

export class SongbirdHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SongbirdHelperInterface;

  functions: {
    FtsoManager(overrides?: CallOverrides): Promise<[string]>;

    FtsoRewardManager(overrides?: CallOverrides): Promise<[string]>;

    Version(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    delegateInfo(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          string[],
          BigNumber[],
          BigNumber[]
        ] & {
          balance: BigNumber;
          wrapped: BigNumber;
          delegationMode: BigNumber;
          unclaimedAmount: BigNumber;
          pendingAmount: BigNumber;
          currentRewardEpoch: BigNumber;
          epochDuration: BigNumber;
          delegateAddresses: string[];
          delegateBips: BigNumber[];
          unclaimedEpochs: BigNumber[];
        }
      ]
    >;

    votePowers(
      validators: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        totalPowers: BigNumber;
        powers: BigNumber[];
        balances: BigNumber[];
      }
    >;

    wSGB(overrides?: CallOverrides): Promise<[string]>;
  };

  FtsoManager(overrides?: CallOverrides): Promise<string>;

  FtsoRewardManager(overrides?: CallOverrides): Promise<string>;

  Version(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  delegateInfo(
    owner: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string[],
      BigNumber[],
      BigNumber[]
    ] & {
      balance: BigNumber;
      wrapped: BigNumber;
      delegationMode: BigNumber;
      unclaimedAmount: BigNumber;
      pendingAmount: BigNumber;
      currentRewardEpoch: BigNumber;
      epochDuration: BigNumber;
      delegateAddresses: string[];
      delegateBips: BigNumber[];
      unclaimedEpochs: BigNumber[];
    }
  >;

  votePowers(
    validators: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber[], BigNumber[]] & {
      totalPowers: BigNumber;
      powers: BigNumber[];
      balances: BigNumber[];
    }
  >;

  wSGB(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FtsoManager(overrides?: CallOverrides): Promise<string>;

    FtsoRewardManager(overrides?: CallOverrides): Promise<string>;

    Version(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    delegateInfo(
      owner: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string[],
        BigNumber[],
        BigNumber[]
      ] & {
        balance: BigNumber;
        wrapped: BigNumber;
        delegationMode: BigNumber;
        unclaimedAmount: BigNumber;
        pendingAmount: BigNumber;
        currentRewardEpoch: BigNumber;
        epochDuration: BigNumber;
        delegateAddresses: string[];
        delegateBips: BigNumber[];
        unclaimedEpochs: BigNumber[];
      }
    >;

    votePowers(
      validators: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[], BigNumber[]] & {
        totalPowers: BigNumber;
        powers: BigNumber[];
        balances: BigNumber[];
      }
    >;

    wSGB(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    FtsoManager(overrides?: CallOverrides): Promise<BigNumber>;

    FtsoRewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    Version(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    delegateInfo(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    votePowers(
      validators: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wSGB(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FtsoManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FtsoRewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateInfo(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowers(
      validators: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wSGB(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
