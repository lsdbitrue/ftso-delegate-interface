/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFtsoManagerInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentPriceEpochData()": FunctionFragment;
    "getCurrentRewardEpoch()": FunctionFragment;
    "getPriceEpochConfiguration()": FunctionFragment;
    "getRewardEpochVotePowerBlock(uint256)": FunctionFragment;
    "rewardEpochDurationSeconds()": FunctionFragment;
    "rewardEpochs(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentPriceEpochData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRewardEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceEpochConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochVotePowerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochDurationSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardEpochs",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentPriceEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceEpochConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochVotePowerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochDurationSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardEpochs",
    data: BytesLike
  ): Result;

  events: {};
}

export class IFtsoManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFtsoManagerInterface;

  functions: {
    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _priceEpochId: BigNumber;
        _priceEpochStartTimestamp: BigNumber;
        _priceEpochEndTimestamp: BigNumber;
        _priceEpochRevealEndTimestamp: BigNumber;
        _currentTimestamp: BigNumber;
      }
    >;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstPriceEpochStartTs: BigNumber;
        _priceEpochDurationSeconds: BigNumber;
        _revealEpochDurationSeconds: BigNumber;
      }
    >;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardEpochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          votepowerBlock: BigNumber;
          startBlock: BigNumber;
          startTimestamp: BigNumber;
        }
      ]
    >;
  };

  getCurrentPriceEpochData(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _priceEpochId: BigNumber;
      _priceEpochStartTimestamp: BigNumber;
      _priceEpochEndTimestamp: BigNumber;
      _priceEpochRevealEndTimestamp: BigNumber;
      _currentTimestamp: BigNumber;
    }
  >;

  getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getPriceEpochConfiguration(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _firstPriceEpochStartTs: BigNumber;
      _priceEpochDurationSeconds: BigNumber;
      _revealEpochDurationSeconds: BigNumber;
    }
  >;

  getRewardEpochVotePowerBlock(
    _rewardEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  rewardEpochs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      votepowerBlock: BigNumber;
      startBlock: BigNumber;
      startTimestamp: BigNumber;
    }
  >;

  callStatic: {
    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _priceEpochId: BigNumber;
        _priceEpochStartTimestamp: BigNumber;
        _priceEpochEndTimestamp: BigNumber;
        _priceEpochRevealEndTimestamp: BigNumber;
        _currentTimestamp: BigNumber;
      }
    >;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _firstPriceEpochStartTs: BigNumber;
        _priceEpochDurationSeconds: BigNumber;
        _revealEpochDurationSeconds: BigNumber;
      }
    >;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    rewardEpochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        votepowerBlock: BigNumber;
        startBlock: BigNumber;
        startTimestamp: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getCurrentPriceEpochData(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentRewardEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceEpochConfiguration(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardEpochDurationSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    rewardEpochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentPriceEpochData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentRewardEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceEpochConfiguration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochVotePowerBlock(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEpochDurationSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardEpochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
