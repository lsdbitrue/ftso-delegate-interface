/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IIFtsoRewardManagerInterface extends ethers.utils.Interface {
  functions: {
    "activate()": FunctionFragment;
    "active()": FunctionFragment;
    "claimReward(address,uint256[])": FunctionFragment;
    "claimRewardFromDataProviders(address,uint256[],address[])": FunctionFragment;
    "closeExpiredRewardEpoch(uint256)": FunctionFragment;
    "deactivate()": FunctionFragment;
    "distributeRewards(address[],uint256[],uint256,uint256,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getClaimedReward(uint256,address,address)": FunctionFragment;
    "getDataProviderCurrentFeePercentage(address)": FunctionFragment;
    "getDataProviderScheduledFeePercentageChanges(address)": FunctionFragment;
    "getEpochReward(uint256)": FunctionFragment;
    "getEpochsWithClaimableRewards()": FunctionFragment;
    "getEpochsWithUnclaimedRewards(address)": FunctionFragment;
    "getRewardEpochToExpireNext()": FunctionFragment;
    "getStateOfRewards(address,uint256)": FunctionFragment;
    "getStateOfRewardsFromDataProviders(address,uint256,address[])": FunctionFragment;
    "getUnclaimedReward(uint256,address)": FunctionFragment;
    "setDataProviderFeePercentage(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activate", values?: undefined): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardFromDataProviders",
    values: [string, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeExpiredRewardEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [
      string[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedReward",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderCurrentFeePercentage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithClaimableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochsWithUnclaimedRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardEpochToExpireNext",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateOfRewardsFromDataProviders",
    values: [string, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnclaimedReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataProviderFeePercentage",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "activate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeExpiredRewardEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderCurrentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataProviderScheduledFeePercentageChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochsWithUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardEpochToExpireNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateOfRewardsFromDataProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnclaimedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataProviderFeePercentage",
    data: BytesLike
  ): Result;

  events: {
    "DailyAuthorizedInflationSet(uint256)": EventFragment;
    "InflationReceived(uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "DailyAuthorizedInflationSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InflationReceived"): EventFragment;
}

export type DailyAuthorizedInflationSetEvent = TypedEvent<
  [BigNumber] & { authorizedAmountWei: BigNumber }
>;

export type InflationReceivedEvent = TypedEvent<
  [BigNumber] & { amountReceivedWei: BigNumber }
>;

export class IIFtsoRewardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IIFtsoRewardManagerInterface;

  functions: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    claimReward(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRewardFromDataProviders(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      _dataProviders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeExpiredRewardEpoch(
      _rewardEpochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      addresses: string[],
      weights: BigNumberish[],
      totalWeight: BigNumberish,
      epochId: BigNumberish,
      ftso: string,
      priceEpochDurationSeconds: BigNumberish,
      currentRewardEpoch: BigNumberish,
      priceEpochEndTime: BigNumberish,
      votePowerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getClaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _claimed: boolean; _amount: BigNumber }
    >;

    getDataProviderCurrentFeePercentage(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _feePercentageBIPS: BigNumber }>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feePercentageBIPS: BigNumber[];
        _validFromEpoch: BigNumber[];
        _fixed: boolean[];
      }
    >;

    getEpochReward(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalReward: BigNumber;
        _claimedReward: BigNumber;
      }
    >;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _startEpochId: BigNumber;
        _endEpochId: BigNumber;
      }
    >;

    getEpochsWithUnclaimedRewards(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _epochIds: BigNumber[] }>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStateOfRewards(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    getStateOfRewardsFromDataProviders(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      _dataProviders: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[], boolean] & {
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    getUnclaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amount: BigNumber; _weight: BigNumber }
    >;

    setDataProviderFeePercentage(
      _feePercentageBIPS: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  active(overrides?: CallOverrides): Promise<boolean>;

  claimReward(
    _recipient: string,
    _rewardEpochs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRewardFromDataProviders(
    _recipient: string,
    _rewardEpochs: BigNumberish[],
    _dataProviders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeExpiredRewardEpoch(
    _rewardEpochId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deactivate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    addresses: string[],
    weights: BigNumberish[],
    totalWeight: BigNumberish,
    epochId: BigNumberish,
    ftso: string,
    priceEpochDurationSeconds: BigNumberish,
    currentRewardEpoch: BigNumberish,
    priceEpochEndTime: BigNumberish,
    votePowerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getClaimedReward(
    _rewardEpoch: BigNumberish,
    _dataProvider: string,
    _claimer: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _claimed: boolean; _amount: BigNumber }>;

  getDataProviderCurrentFeePercentage(
    _dataProvider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDataProviderScheduledFeePercentageChanges(
    _dataProvider: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], boolean[]] & {
      _feePercentageBIPS: BigNumber[];
      _validFromEpoch: BigNumber[];
      _fixed: boolean[];
    }
  >;

  getEpochReward(
    _rewardEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _totalReward: BigNumber;
      _claimedReward: BigNumber;
    }
  >;

  getEpochsWithClaimableRewards(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      _startEpochId: BigNumber;
      _endEpochId: BigNumber;
    }
  >;

  getEpochsWithUnclaimedRewards(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

  getStateOfRewards(
    _beneficiary: string,
    _rewardEpoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], boolean[], boolean] & {
      _dataProviders: string[];
      _rewardAmounts: BigNumber[];
      _claimed: boolean[];
      _claimable: boolean;
    }
  >;

  getStateOfRewardsFromDataProviders(
    _beneficiary: string,
    _rewardEpoch: BigNumberish,
    _dataProviders: string[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], boolean[], boolean] & {
      _rewardAmounts: BigNumber[];
      _claimed: boolean[];
      _claimable: boolean;
    }
  >;

  getUnclaimedReward(
    _rewardEpoch: BigNumberish,
    _dataProvider: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { _amount: BigNumber; _weight: BigNumber }
  >;

  setDataProviderFeePercentage(
    _feePercentageBIPS: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activate(overrides?: CallOverrides): Promise<void>;

    active(overrides?: CallOverrides): Promise<boolean>;

    claimReward(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewardFromDataProviders(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      _dataProviders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeExpiredRewardEpoch(
      _rewardEpochId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deactivate(overrides?: CallOverrides): Promise<void>;

    distributeRewards(
      addresses: string[],
      weights: BigNumberish[],
      totalWeight: BigNumberish,
      epochId: BigNumberish,
      ftso: string,
      priceEpochDurationSeconds: BigNumberish,
      currentRewardEpoch: BigNumberish,
      priceEpochEndTime: BigNumberish,
      votePowerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _claimed: boolean; _amount: BigNumber }
    >;

    getDataProviderCurrentFeePercentage(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], boolean[]] & {
        _feePercentageBIPS: BigNumber[];
        _validFromEpoch: BigNumber[];
        _fixed: boolean[];
      }
    >;

    getEpochReward(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _totalReward: BigNumber;
        _claimedReward: BigNumber;
      }
    >;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _startEpochId: BigNumber;
        _endEpochId: BigNumber;
      }
    >;

    getEpochsWithUnclaimedRewards(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getStateOfRewards(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], boolean[], boolean] & {
        _dataProviders: string[];
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    getStateOfRewardsFromDataProviders(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      _dataProviders: string[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], boolean[], boolean] & {
        _rewardAmounts: BigNumber[];
        _claimed: boolean[];
        _claimable: boolean;
      }
    >;

    getUnclaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amount: BigNumber; _weight: BigNumber }
    >;

    setDataProviderFeePercentage(
      _feePercentageBIPS: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "DailyAuthorizedInflationSet(uint256)"(
      authorizedAmountWei?: null
    ): TypedEventFilter<[BigNumber], { authorizedAmountWei: BigNumber }>;

    DailyAuthorizedInflationSet(
      authorizedAmountWei?: null
    ): TypedEventFilter<[BigNumber], { authorizedAmountWei: BigNumber }>;

    "InflationReceived(uint256)"(
      amountReceivedWei?: null
    ): TypedEventFilter<[BigNumber], { amountReceivedWei: BigNumber }>;

    InflationReceived(
      amountReceivedWei?: null
    ): TypedEventFilter<[BigNumber], { amountReceivedWei: BigNumber }>;
  };

  estimateGas: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRewardFromDataProviders(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      _dataProviders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeExpiredRewardEpoch(
      _rewardEpochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      addresses: string[],
      weights: BigNumberish[],
      totalWeight: BigNumberish,
      epochId: BigNumberish,
      ftso: string,
      priceEpochDurationSeconds: BigNumberish,
      currentRewardEpoch: BigNumberish,
      priceEpochEndTime: BigNumberish,
      votePowerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getClaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochReward(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEpochsWithUnclaimedRewards(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardEpochToExpireNext(overrides?: CallOverrides): Promise<BigNumber>;

    getStateOfRewards(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateOfRewardsFromDataProviders(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      _dataProviders: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnclaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRewardFromDataProviders(
      _recipient: string,
      _rewardEpochs: BigNumberish[],
      _dataProviders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeExpiredRewardEpoch(
      _rewardEpochId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deactivate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      addresses: string[],
      weights: BigNumberish[],
      totalWeight: BigNumberish,
      epochId: BigNumberish,
      ftso: string,
      priceEpochDurationSeconds: BigNumberish,
      currentRewardEpoch: BigNumberish,
      priceEpochEndTime: BigNumberish,
      votePowerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getClaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      _claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataProviderCurrentFeePercentage(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDataProviderScheduledFeePercentageChanges(
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochReward(
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochsWithClaimableRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEpochsWithUnclaimedRewards(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardEpochToExpireNext(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewards(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateOfRewardsFromDataProviders(
      _beneficiary: string,
      _rewardEpoch: BigNumberish,
      _dataProviders: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnclaimedReward(
      _rewardEpoch: BigNumberish,
      _dataProvider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDataProviderFeePercentage(
      _feePercentageBIPS: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
